import 'package:awesome_notifications/awesome_notifications.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_database/firebase_database.dart';
import 'package:flutter/material.dart';
import 'package:my_app/login_screen.dart';
import 'package:my_app/subscription_details_screen.dart';
import 'edit_subscription_screen.dart';
import 'login_or_sign_up.dart';
import 'add_new_subscription_screen.dart';
import 'user_profile_screen.dart';
import 'package:flutter_slidable/flutter_slidable.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp();
  // AwesomeNotifications().initialize(
  //   null,
  //   [
  //     NotificationChannel(
  //       channelKey: 'basic_channel',
  //       channelName: 'Due Date Approaching',
  //       channelDescription: 'SubWatch',
  //       defaultColor: Colors.teal,
  //       channelShowBadge: true,
  //     ),
  //   ],
  // );
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  // This widget is the root of your application.
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'SubWatch',
      debugShowCheckedModeBanner: false,
      theme: ThemeData(
        primarySwatch: Colors.deepPurple,
      ),
      home: LoginOrSignUpPage(),
    );
  }
}

class HomePage extends StatefulWidget {
  var name = "", service = "", date = "";
  var index = -1;
  var editing = 0;

  HomePage(this.name, this.service, this.date, this.index, this.editing);

  HomePage.default1();

  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<HomePage> {
  var userID = FirebaseAuth.instance.currentUser!.uid;
  var subscriptionList = [];
  var keysList = [];
  var keysListRemove = [];

  // Run until a subscription is added
  _MyHomePageState() {
    refreshSubs();
    refreshKeys();
    FirebaseDatabase.instance
        .reference()
        .child("Users")
        .onChildChanged
        .listen((event) {
      print("Update: data changed");
      refreshSubs();
    });
  }

  void refreshSubs() {
    // load all subscriptions from firebase database and display in ListView
    // subscriptions from database returned as hash map/ dictionary so need to iterate through each,
    // retrieve values and then put the values in list (tempList)
    FirebaseDatabase.instance
        .reference()
        .child("Users/" + userID + "/Subscriptions")
        .once()
        .then((datasnapshot) {
      // datasnapshot is value returned
      print("Successfully loaded data");
      // print(datasnapshot);
      // print("Key:"); // database saves items as key-value pair
      // print(datasnapshot.key);
      // print("Value:");
      // print(datasnapshot.value);

      // iterate through map of all items by using for-each loop
      // k, v is key, value pair
      // then adding each value to list
      var subscriptionTempList = [];
      // print("Iterating through value map:");
      datasnapshot.value.forEach((k, v) {
        subscriptionTempList.add(v);
        keysList.add(k);
        // k is unique key generated by database for every new subscription
      }); // end of loop
      // print("Final Subscription List");
      //  print(subscriptionTempList);
      // print(keysList);
      subscriptionList = subscriptionTempList;
      setState(() {
        updateSubscription();
      });
    }).catchError((error) {
      print("Failed to load data");
      print(error.toString());
    });
  }

  void refreshKeys() {
    FirebaseDatabase.instance
        .reference()
        .child("Users/" + userID + "/Subscriptions")
        .once()
        .then((datasnapshot) {
      print("Successfully loaded data for keys");
      datasnapshot.value.forEach((k, v) {
        keysListRemove.add(k);
        // k is unique key generated by database for every new subscription
      }); // end of loop
      //print(keysListRemove);
      setState(() {});
    }).catchError((error) {
      print("Failed to load data");
      print(error.toString());
    });
  }

  void updateSubscription() {
    if (this.widget.editing == 1) {
      print(this.widget.index);
      subscriptionList[this.widget.index] = {
        "due date": this.widget.date,
        "service provider": this.widget.service,
        "subscription name": this.widget.name
      };
      // Update DB
      //  send to FireBase
      FirebaseDatabase.instance
          .reference()
          .child("Users/" +
              userID +
              "/Subscriptions/" +
              keysList[this.widget.index])
          .set({
        "subscription name": this.widget.name,
        "service provider": this.widget.service,
        "due date": this.widget.date
      }).then((value) {
        print("Successfully updated subscription in database");
      }).catchError((error) {
        print("Failed to update" + error.toString());
        showNotSaved(context);
      });
      this.widget.editing = 0;
      FirebaseDatabase.instance
          .reference()
          .child("Users")
          .onChildChanged
          .listen((event) {
        print("Update!");
        updateSubscription();
        refreshSubs();
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text("Home"),
      ),
      drawer: Drawer(
        child: ListView(
          padding: EdgeInsets.zero,
          children: <Widget>[
            DrawerHeader(
              decoration: BoxDecoration(
                color: Colors.deepPurple,
              ),
              child: Text(
                'SubWatch',
                style: TextStyle(
                  color: Colors.white,
                  fontSize: 24,
                ),
              ),
            ),
            ListTile(
              leading: Icon(Icons.home),
              title: Text('Home'),
              onTap: () {
                Navigator.push(
                  context,
                  MaterialPageRoute(builder: (context) => HomePage.default1()),
                );
              },
            ),
            ListTile(
              leading: Icon(Icons.account_circle),
              title: Text('My Profile'),
              onTap: () {
                Navigator.push(
                  context,
                  MaterialPageRoute(builder: (context) => UserProfilePage()),
                );
              },
            ),
            ListTile(
              leading: Icon(Icons.logout),
              title: Text('Log out'),
              onTap: () {
                Navigator.push(
                  context,
                  MaterialPageRoute(builder: (context) => LoginOrSignUpPage()),
                );
              },
            ),
          ],
        ),
      ),

      body: ListView(children: [
        Container(
          margin: EdgeInsets.all(10),
          child: Text('My Subscriptions: ',
              textAlign: TextAlign.center,
              style: TextStyle(
                fontSize: 28,
                color: Colors.lightBlue,
                fontWeight: FontWeight.bold,
              )),
        ),
        Container(
          margin: EdgeInsets.all(5),
          child: Text('Swipe left on a subscription for more options ',
              textAlign: TextAlign.center,
              style: TextStyle(
                fontSize: 18,
                color: Colors.white,
                backgroundColor: Colors.green,
                fontWeight: FontWeight.w600,
              )),
        ),
        ListView.builder(
            shrinkWrap: true,
            physics: ScrollPhysics(),
            itemCount: subscriptionList.length,
            itemBuilder: (BuildContext context, int index) {
              return Slidable(
                endActionPane: ActionPane(
                  motion: const ScrollMotion(),
                  children: [
                    SlidableAction(
                      onPressed: (context) {
                        // confirmation of removal
                        showDeleteAlert(context, index);
                      },
                      backgroundColor: Color(0xFFFE4A49),
                      foregroundColor: Colors.white,
                      icon: Icons.delete,
                      label: 'Delete',
                    ),
                    SlidableAction(
                      onPressed: (context) {
                        this.widget.editing = 1;
                        Navigator.push(
                          context,
                          MaterialPageRoute(
                              builder: (context) => EditSubscriptionPage(
                                  subscriptionList[index], index)),
                        );
                        updateSubscription();
                      },
                      backgroundColor: Colors.blue,
                      foregroundColor: Colors.white,
                      icon: Icons.edit,
                      label: 'Edit',
                    ),
                  ],
                ),
                child: Container(
                    child: ListTile(
                        onTap: () {
                          print(" Clicked subscription " +
                              (index + 1).toString());
                          // go to subscription details page for subscription clicked
                          Navigator.push(
                            context,
                            MaterialPageRoute(
                                builder: (context) => SubscriptionDetailsPage(
                                    subscriptionList[index])),
                          );
                        },
                        title: Container(
                          margin: EdgeInsets.only(
                              top: 5, bottom: 5, left: 20, right: 20),
                          child: Center(
                            child: Column(
                              mainAxisAlignment: MainAxisAlignment.center,
                              children: [
                                // list of active subscriptions
                                Text(
                                    "     Subscription " +
                                        (index + 1).toString(),
                                    style: TextStyle(
                                      fontSize: 18,
                                      color: Colors.indigo,
                                      fontWeight: FontWeight.w700,
                                    )),
                                Text(
                                  '${subscriptionList[index]['subscription name']}',
                                  style: TextStyle(fontWeight: FontWeight.bold),
                                ),
                                Text(
                                  '${subscriptionList[index]["service provider"]}',
                                  style: TextStyle(fontWeight: FontWeight.bold),
                                ),
                                Text(
                                  '${subscriptionList[index]["due date"]}',
                                  style: TextStyle(fontWeight: FontWeight.bold),
                                ),
                              ],
                            ),
                          ),
                        ))),
              );
            }),
      ]),

      floatingActionButton: FloatingActionButton(
        onPressed: () {
          Navigator.push(
            // used to navigate between pages
            context,
            MaterialPageRoute(builder: (context) => AddNewSubPage()),
          );
        },
        tooltip: 'Add Subscription',
        child: Icon(Icons.add),
      ),
      // This trailing comma makes auto-formatting nicer for build methods.
    );
  }

  void showDeleteAlert(BuildContext context, int index) => showDialog(
      context: context,
      builder: (context) => AlertDialog(
            title: Text("Delete confirmation"),
            content: Text("Are you sure you want to delete this subscription?"),
            actions: [
              TextButton(
                  onPressed: () {
                    Navigator.of(context).pop();
                  },
                  child: Text("No")),
              TextButton(
                child: Text("Yes"),
                onPressed: () {
                  Navigator.of(context).pop();
                  setState(() {
                    subscriptionList.removeAt(index);
                    //update database
                    FirebaseDatabase.instance
                        .reference()
                        .child("Users/" +
                            userID +
                            "/Subscriptions/" +
                            keysListRemove[index])
                        .remove()
                        .then((value) {
                      keysListRemove.removeAt(index);
                      showDeletedSnackBar(context);
                      FirebaseDatabase.instance
                          .reference()
                          .child("Users/" +
                              userID +
                              "/Subscriptions/" +
                              keysListRemove[index])
                          .onChildRemoved
                          .listen((event) {
                        print("Subscription removed from database");
                        refreshSubs();
                      });
                    }).catchError((error) {
                      print("Failed to remove data");
                      print(error.toString());
                    });
                  });
                },
              )
            ],
          ));

  void showDeletedSnackBar(BuildContext context) {
    final snackBar = SnackBar(
      content: Text("Subscription was deleted"),
    );

    ScaffoldMessenger.of(context).showSnackBar(snackBar);
  }

  void showSavedSnackBar(BuildContext context) {
    final snackBar = SnackBar(
      content: Text("Subscription was updated"),
    );

    ScaffoldMessenger.of(context).showSnackBar(snackBar);
  }

  void showNotSaved(BuildContext context) {
    final snackBar = SnackBar(
      content: Text("Error: Subscription not updated"),
    );
    ScaffoldMessenger.of(context).showSnackBar(snackBar);
  }
} // end of class
