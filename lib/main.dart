import 'package:firebase_auth/firebase_auth.dart';
import 'package:firebase_database/firebase_database.dart';
import 'package:flutter/material.dart';
import 'package:my_app/subscription_details_screen.dart';
import 'edit_subscription_screen.dart';
import 'login_or_sign_up.dart';
import 'add_new_subscription_screen.dart';
import 'user_profile_screen.dart';
import 'package:flutter_slidable/flutter_slidable.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  // This widget is the root of your application.
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'SubWatch',
      debugShowCheckedModeBanner: false,
      theme: ThemeData(
        primarySwatch: Colors.deepPurple,
      ),
      home: LoginOrSignUpPage(),
    );
  }
}

class HomePage extends StatefulWidget {

  var name = "", service="", date = "";
  HomePage(this.name, this.service, this.date);
  HomePage.default1({this.name = "", this.service = "", this.date= ""});

  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<HomePage> {
  var userID = FirebaseAuth.instance.currentUser!.uid;
  var subscriptionList = [];
  var keysList=[];


  // Run until a subscription is added
  _MyHomePageState() {
    refreshSubs();
    FirebaseDatabase.instance
        .reference()
        .child("Users")
        .onChildChanged
        .listen((event) {
      print("Update: data changed");
      refreshSubs();
    });
  }

  void refreshSubs() {
    // load all subscriptions from firebase database and display in ListView
    // subscriptions from database returned as hash map/ dictionary so need to iterate through each,
    // retrieve values and then put the values in list (tempList)
    FirebaseDatabase.instance
        .reference()
        .child("Users/" + userID + "/Subscriptions")
        .once()
        .then((datasnapshot) {
      // datasnapshot is value returned
      print("Successfully loaded data");
      // print(datasnapshot);
      // print("Key:"); // database saves items as key-value pair
      // print(datasnapshot.key);
      // print("Value:");
      // print(datasnapshot.value);

      // iterate through map of all items by using for-each loop
      // k, v is key, value pair
      // then adding each value to list
      var subscriptionTempList = [];
      // print("Iterating through value map:");
      datasnapshot.value.forEach((k, v) {
        // print(k);
        // print(v);
        subscriptionTempList.add(v);
        keysList.add(k);
       // k is unique key generated by database for every new subscription
      }); // end of loop
      // print("Final Subscription List");
      // print(subscriptionTempList);
      // print("Final key list");
      // print(keysList);
      subscriptionList = subscriptionTempList;
      setState(() {});
    }).catchError((error) {
      print("Failed to load data");
      print(error.toString());
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text("Home"),
      ),
      drawer: Drawer(
        child: ListView(
          padding: EdgeInsets.zero,
          children: <Widget>[
            DrawerHeader(
              decoration: BoxDecoration(
                color: Colors.deepPurple,
              ),
              child: Text(
                'SubWatch',
                style: TextStyle(
                  color: Colors.white,
                  fontSize: 24,
                ),
              ),
            ),
            ListTile(
              leading: Icon(Icons.home),
              title: Text('Home'),
              onTap: () {
                Navigator.push(
                  context,
                  MaterialPageRoute(builder: (context) => HomePage.default1()),
                );
              },
            ),
            ListTile(
              leading: Icon(Icons.account_circle),
              title: Text('My Profile'),
              onTap: () {
                Navigator.push(
                  context,
                  MaterialPageRoute(builder: (context) => UserProfilePage()),
                );
              },
            ),
            ListTile(
              leading: Icon(Icons.logout),
              title: Text('Log out'),
              onTap: () {
                Navigator.push(
                  context,
                  MaterialPageRoute(builder: (context) => LoginOrSignUpPage()),
                );
              },
            ),
          ],
        ),
      ),

      body: ListView(shrinkWrap: true, padding: EdgeInsets.zero, children: <
          Widget>[
        Column(children: [
          Container(
            margin: EdgeInsets.all(10),
            child: Text('My Subscriptions: ',
                style: TextStyle(
                  fontSize: 28,
                  color: Colors.lightBlue,
                  fontWeight: FontWeight.bold,
                )),
          ),
          Container(
            margin: EdgeInsets.all(5),
            child: Text('Swipe left on a subscription for more options ',
                style: TextStyle(
                  fontSize: 18,
                  color: Colors.white,
                  backgroundColor: Colors.green,
                  fontWeight: FontWeight.w600,
                )),
          ),
          ListView.builder(
              shrinkWrap: true,
              itemCount: subscriptionList.length,
              itemBuilder: (BuildContext context, int index) {
                return Slidable(
                  endActionPane: ActionPane(
                    motion: const ScrollMotion(),
                    children: [
                      SlidableAction(
                        onPressed: (context) {
                            // confirmation of removal
                          showDeleteAlert(context, index);
                        },
                        backgroundColor: Color(0xFFFE4A49),
                        foregroundColor: Colors.white,
                        icon: Icons.delete,
                        label: 'Delete',
                      ),
                      SlidableAction(
                        onPressed: (context) {
                          Navigator.push(
                            context,
                            MaterialPageRoute(builder: (context) => EditSubscriptionPage(subscriptionList[index])),
                          );
                          //updateData(context, index);
                        },
                        backgroundColor: Colors.blue,
                        foregroundColor: Colors.white,
                        icon: Icons.edit,
                        label: 'Edit',
                      ),
                    ],
                  ),

                child: Container(
                      child: ListTile(
                          onTap: () {
                            print(" Clicked subscription " + (index + 1).toString());
                            // go to subscription details page for subscription clicked
                            Navigator.push(
                              context,
                              MaterialPageRoute(
                                  builder: (context) => SubscriptionDetailsPage(
                                      subscriptionList[index])),
                            );
                          },
                          title: Container(
                            margin: EdgeInsets.only(
                                top: 5, bottom: 5, left: 20, right: 20),
                            child: Center(
                              child: Column(
                                mainAxisAlignment: MainAxisAlignment.center,
                                children: [
                                  // list of active subscriptions
                                  Text("     Subscription " + (index + 1).toString(),
                                  style: TextStyle(
                                    fontSize: 18,
                                   color: Colors.indigo,
                                    fontWeight: FontWeight.w700,
                                  )),
                                  Text(
                                    '${subscriptionList[index]['subscription name']}',
                                    style:
                                        TextStyle(fontWeight: FontWeight.bold),
                                  ),
                                  Text(
                                    '${subscriptionList[index]["service provider"]}',
                                    style:
                                        TextStyle(fontWeight: FontWeight.bold),
                                  ),
                                  Text(
                                    '${subscriptionList[index]["due date"]}',
                                    style:
                                        TextStyle(fontWeight: FontWeight.bold),
                                  ),
                                  // Button to implement updates from edit Subscription page
                                  TextButton(
                                    child: Text("Update",
                                      style: TextStyle(fontSize: 18),
                                    ),
                                    onPressed: () {
                                      FirebaseDatabase.instance.reference().child("Users/" + userID +"/Subscriptions/" + keysList[index]).update(
                                          {
                                            "subscription name": "${widget.name}",
                                            "service provider": "${widget.service}",
                                            "due date": "${widget.date}",
                                          }).then((value) {
                                         print(index);
                                         refreshSubs();
                                        // print("${widget.name}");
                                        // print("${widget.service}");
                                        // print("${widget.date}");
                                        showSavedSnackBar(context);
                                      }).catchError((error) {
                                        showNotSaved(context);
                                        print(error.toString());
                                      });
                                    },
                                  )
                                ],
                              ),
                            ),
                          ))),
                );
              }),
        ]),
      ]),

      floatingActionButton: FloatingActionButton(
        onPressed: () {
          Navigator.push(
            // used to navigate between pages
            context,
            MaterialPageRoute(builder: (context) => AddNewSubPage()),
          );
        },
        tooltip: 'Add Subscription',
        child: Icon(Icons.add),
      ),
      // This trailing comma makes auto-formatting nicer for build methods.
    );
  }

  void showDeleteAlert(BuildContext context, int index) => showDialog(
      context: context,
      builder: (context) => AlertDialog(
            title: Text("Delete confirmation"),
            content: Text("Are you sure you want to delete this subscription?"),
            actions: [
              TextButton(
                  onPressed: () {
                    Navigator.of(context).pop();
                    print(index);
                    },
                  child: Text("No")),
              TextButton(
                child: Text("Yes"),
                onPressed: () {
                  Navigator.of(context).pop();
                  setState(() {
                    subscriptionList.removeAt(index);
                    //update database
                    FirebaseDatabase.instance
                        .reference()
                        .child("Users/" + userID + "/Subscriptions/" + keysList[index] )
                        .remove()
                        .then((value) {
                      showDeletedSnackBar(context);
                      FirebaseDatabase.instance
                          .reference()
                          .child("Users/" + userID + "/Subscriptions/" + keysList[index] )
                          .onChildRemoved
                          .listen((event) {
                        print("Subscription removed from database");
                        refreshSubs();
                      });
                    }).catchError((error) {
                      print("Failed to remove data");
                      print(error.toString());
                    });
                  });
                },
              )
            ],
          ));

  // void updateData(BuildContext context, int index) {
  // }

  void showDeletedSnackBar(BuildContext context) {
    final snackBar = SnackBar(
      content: Text("Subscription was deleted"),
    );

    ScaffoldMessenger.of(context).showSnackBar(snackBar);
  }

  void showSavedSnackBar(BuildContext context) {
    final snackBar = SnackBar(
      content: Text("Subscription was updated"),
    );

    ScaffoldMessenger.of(context).showSnackBar(snackBar);
  }

  void showNotSaved(BuildContext context) {
    final snackBar = SnackBar(
      content: Text("Error: Subscription not updated"),
    );
    ScaffoldMessenger.of(context).showSnackBar(snackBar);
  }


} // end of class
